package xyz.nulldev.kdom.api

import azadev.kotlin.css.Stylesheet
import org.w3c.dom.HTMLElement
import xyz.nulldev.kdom.util.HUGE_STRING

class ElementStyle {
    private lateinit var content: String

    private val generated by lazy {
        content.replace("\"", "&#34;") // Escape double quote
                .replace("'", "&#39;") // Escape single quote
                .replace("\n", "&#10;") // Escape line feed
                .replace("\r", "&#13;") // Escape carriage return
    }

    constructor(input: String) {
        var css = input
        var prefix = "[$PLACEHOLDER_STYLE_KEY~=$PLACEHOLDER_STYLE_VALUE]"

        /**
         * Copyright (c) 2015 Thomas Park
         * Under MIT License
         * https://github.com/thomaspark/scoper
         */
        //language=js
        js("""
            var re = new RegExp("([^\r\n,{}]+)(,(?=[^}]*{)|\s*{)", "g");
            css = css.replace(re, function(g0, g1, g2) {

                if (g1.match(/^\s*(@media|@.*keyframes|to|from|@font-face|1?[0-9]?[0-9])/)) {
                return g1 + g2;
            }

                if (g1.match(/:scope/)) {
                g1 = g1.replace(/([^\s]*):scope/, function(h0, h1) {
                if (h1 === "") {
                    return "> *";
                } else {
                    return "> " + h1;
                }
            });
            }

                g1 = g1.replace(/^(\s*)/, "$1" + prefix + " ");

                return g1 + g2;
            });
        """)

        content = css
    }

    constructor(gen: Stylesheet.() -> Unit) {
        content = Stylesheet {
                    attr("$PLACEHOLDER_STYLE_KEY~=$PLACEHOLDER_STYLE_VALUE") {
                        gen(this)
                    }
                }.render()
    }

    override fun toString() = generated

    companion object {
        internal val PLACEHOLDER_STYLE_KEY = "data-kdom-$HUGE_STRING-kstyle"
        internal val PLACEHOLDER_STYLE_VALUE = "kdom-$HUGE_STRING-placeholder-style"

        fun splitStyleString(string: String) = string.split(" ").filterNot(String::isBlank)
        fun joinStyleString(string: List<String>) = string.joinToString(separator = " ")
        fun appendStyleEntry(element: HTMLElement, entry: String) = element.setAttribute(PLACEHOLDER_STYLE_KEY,
                joinStyleString(
                        splitStyleString(element.getAttribute(PLACEHOLDER_STYLE_KEY) ?: "") + entry
                )
        )
        fun removeStyleEntry(element: HTMLElement, entry: String) = element.setAttribute(PLACEHOLDER_STYLE_KEY,
                joinStyleString(
                        splitStyleString(element.getAttribute(PLACEHOLDER_STYLE_KEY) ?: "") - entry
                )
        )
    }
}